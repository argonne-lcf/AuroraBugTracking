name: Sync issues to table

on:
  issue_comment:
    types: [created, deleted, edited]
  issues:
    types: [opened, edited]  # closed, deleted, reopened, transferred
  schedule:
    # Run at 2am CST (UTC-6) 3am CDT (UTC-5)
    - cron: '0 8 * * *'
  workflow_dispatch:

jobs:
  sync-issues-to-table:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch and process issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Function to extract field from markdown body
          extract_field() {
            local body="$1"
            local field="$2"
            echo "$body" | awk -v field="$field" '
              BEGIN { found=0; content="" }
              $0 ~ "^### " field { found=1; next }
              found && $0 ~ "^### " { exit }
              found && NF > 0 {
                if (content != "") content = content " "
                content = content $0
              }
              END { printf "%s", content }
            ' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'
          }

          # Function to process issues and create table
          process_issues() {
            local state="$1"
            local output_file="$2"

            # Create table header based on state
            if [ "$state" = "closed" ]; then
              echo "| Internal ID | Description | Vendor ID | Reproducer Path | PoC | Status | Priority? | Date Opened | Closed Date |" > "$output_file"
              echo "| --- | --- | --- | --- | --- | --- | --- | --- | --- |" >> "$output_file"
            else
              echo "| Internal ID | Description | Vendor ID | Reproducer Path | PoC | Status | Priority? | Pre-production? | ETA | Date Opened | Last Updated |" > "$output_file"
              echo "| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |" >> "$output_file"
            fi

            # Fetch and process issues
            gh issue list --state="$state" --json number,title,body,url,labels,createdAt,updatedAt,closedAt --limit 1000 | jq -c '.[] | select(.labels | map(.name) | index("do-not-parse") | not)' | while read -r issue; do
              # TODO: add --json labels, author, assignees (especially labels) to new table columns?
              number=$(jq -r '.number' <<< "$issue")
              url=$(jq -r '.url' <<< "$issue")
              title=$(jq -r '.title' <<< "$issue")
              body=$(jq -r '.body' <<< "$issue")
              created_at=$(jq -r '.createdAt' <<< "$issue")
              updated_at=$(jq -r '.updatedAt' <<< "$issue")
              closed_at=$(jq -r '.closedAt' <<< "$issue")
              labels=$(jq -r '.labels | map(.name) | join(",")' <<< "$issue")

              # Format dates
              created_at=$(date -d "$created_at" +"%Y-%m-%d")
              if [ "$state" = "closed" ] && [ "$closed_at" != "null" ]; then
                last_updated=$(date -d "$closed_at" +"%Y-%m-%d")
              else
                last_updated=$(date -d "$updated_at" +"%Y-%m-%d")
              fi

              poc=$(extract_field "$body" "Point of Contact")
              vendor_tickets=$(extract_field "$body" "Vendor/ALCF/other tickets/IDs")
              reproducer_path=$(extract_field "$body" "Reproducer Path")
              status=$(extract_field "$body" "Status")
              priority=$(if extract_field "$body" "Is this a priority/blocking bug?" | grep -q "\[x\]"; then echo "ðŸš¨"; else echo ""; fi)
              eta=$(extract_field "$body" "ETA")

              # Check for pre-production label
              pre_prod=""
              if echo "$labels" | grep -q "environment:pre-production"; then
                pre_prod="ðŸ§ª"
              fi

              if [ "$state" = "closed" ]; then
                echo "| [$number]($url) | $title | $vendor_tickets | $reproducer_path | $poc | $status | $priority | $created_at | $last_updated |" >> "$output_file"
              else
                echo "| [$number]($url) | $title | $vendor_tickets | $reproducer_path | $poc | $status | $priority | $pre_prod | $eta | $created_at | $last_updated |" >> "$output_file"
              fi
            done
          }

          # Process open issues
          process_issues "open" "bugs_open.md"

          # Process closed issues
          process_issues "closed" "bugs_closed.md"

          # Combine the tables into bugs.md with section headings
          #echo "# Aurora Bug Tracking" > bugs.md
          echo -e "[Link to tables in user-guides](https://docs.alcf.anl.gov/aurora/known-issues/#aurora-bug-tracking-repository-and-table)\n" > bugs.md
          echo -e "\n### Open Issues\n" > bugs.md
          cat bugs_open.md >> bugs.md
          echo -e "\n### Closed Issues\n" >> bugs.md
          cat bugs_closed.md >> bugs.md
      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add bugs.md
          git diff --staged --quiet || (git commit -m "Update bugs.md with latest issues" && git push)
